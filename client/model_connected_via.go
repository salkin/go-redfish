/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ConnectedVia the model 'ConnectedVia'
type ConnectedVia string

// List of ConnectedVia
const (
	CONNECTEDVIA_NOT_CONNECTED ConnectedVia = "NotConnected"
	CONNECTEDVIA_URI ConnectedVia = "URI"
	CONNECTEDVIA_APPLET ConnectedVia = "Applet"
	CONNECTEDVIA_OEM ConnectedVia = "Oem"
)

// All allowed values of ConnectedVia enum
var AllowedConnectedViaEnumValues = []ConnectedVia{
	"NotConnected",
	"URI",
	"Applet",
	"Oem",
}

func (v *ConnectedVia) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectedVia(value)
	for _, existing := range AllowedConnectedViaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectedVia", value)
}

// NewConnectedViaFromValue returns a pointer to a valid ConnectedVia
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectedViaFromValue(v string) (*ConnectedVia, error) {
	ev := ConnectedVia(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectedVia: valid values are %v", v, AllowedConnectedViaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectedVia) IsValid() bool {
	for _, existing := range AllowedConnectedViaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectedVia value
func (v ConnectedVia) Ptr() *ConnectedVia {
	return &v
}

type NullableConnectedVia struct {
	value *ConnectedVia
	isSet bool
}

func (v NullableConnectedVia) Get() *ConnectedVia {
	return v.value
}

func (v *NullableConnectedVia) Set(val *ConnectedVia) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedVia) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedVia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedVia(val *ConnectedVia) *NullableConnectedVia {
	return &NullableConnectedVia{value: val, isSet: true}
}

func (v NullableConnectedVia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedVia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

