/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TransferMethod the model 'TransferMethod'
type TransferMethod string

// List of TransferMethod
const (
	TRANSFERMETHOD_STREAM TransferMethod = "Stream"
	TRANSFERMETHOD_UPLOAD TransferMethod = "Upload"
)

// All allowed values of TransferMethod enum
var AllowedTransferMethodEnumValues = []TransferMethod{
	"Stream",
	"Upload",
}

func (v *TransferMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferMethod(value)
	for _, existing := range AllowedTransferMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferMethod", value)
}

// NewTransferMethodFromValue returns a pointer to a valid TransferMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferMethodFromValue(v string) (*TransferMethod, error) {
	ev := TransferMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferMethod: valid values are %v", v, AllowedTransferMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferMethod) IsValid() bool {
	for _, existing := range AllowedTransferMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferMethod value
func (v TransferMethod) Ptr() *TransferMethod {
	return &v
}

type NullableTransferMethod struct {
	value *TransferMethod
	isSet bool
}

func (v NullableTransferMethod) Get() *TransferMethod {
	return v.value
}

func (v *NullableTransferMethod) Set(val *TransferMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferMethod(val *TransferMethod) *NullableTransferMethod {
	return &NullableTransferMethod{value: val, isSet: true}
}

func (v NullableTransferMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

