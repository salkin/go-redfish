/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// BootSourceOverrideEnabled the model 'BootSourceOverrideEnabled'
type BootSourceOverrideEnabled string

// List of BootSourceOverrideEnabled
const (
	BOOTSOURCEOVERRIDEENABLED_ONCE BootSourceOverrideEnabled = "Once"
	BOOTSOURCEOVERRIDEENABLED_CONTINUOUS BootSourceOverrideEnabled = "Continuous"
)

// All allowed values of BootSourceOverrideEnabled enum
var AllowedBootSourceOverrideEnabledEnumValues = []BootSourceOverrideEnabled{
	"Once",
	"Continuous",
}

func (v *BootSourceOverrideEnabled) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BootSourceOverrideEnabled(value)
	for _, existing := range AllowedBootSourceOverrideEnabledEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BootSourceOverrideEnabled", value)
}

// NewBootSourceOverrideEnabledFromValue returns a pointer to a valid BootSourceOverrideEnabled
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBootSourceOverrideEnabledFromValue(v string) (*BootSourceOverrideEnabled, error) {
	ev := BootSourceOverrideEnabled(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BootSourceOverrideEnabled: valid values are %v", v, AllowedBootSourceOverrideEnabledEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BootSourceOverrideEnabled) IsValid() bool {
	for _, existing := range AllowedBootSourceOverrideEnabledEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BootSourceOverrideEnabled value
func (v BootSourceOverrideEnabled) Ptr() *BootSourceOverrideEnabled {
	return &v
}

type NullableBootSourceOverrideEnabled struct {
	value *BootSourceOverrideEnabled
	isSet bool
}

func (v NullableBootSourceOverrideEnabled) Get() *BootSourceOverrideEnabled {
	return v.value
}

func (v *NullableBootSourceOverrideEnabled) Set(val *BootSourceOverrideEnabled) {
	v.value = val
	v.isSet = true
}

func (v NullableBootSourceOverrideEnabled) IsSet() bool {
	return v.isSet
}

func (v *NullableBootSourceOverrideEnabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBootSourceOverrideEnabled(val *BootSourceOverrideEnabled) *NullableBootSourceOverrideEnabled {
	return &NullableBootSourceOverrideEnabled{value: val, isSet: true}
}

func (v NullableBootSourceOverrideEnabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBootSourceOverrideEnabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

