/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UpdateServiceActions struct for UpdateServiceActions
type UpdateServiceActions struct {
	UpdateServiceSimpleUpdate *VirtualMediaActionsVirtualMediaEjectMedia `json:"#UpdateService.SimpleUpdate,omitempty"`
	UpdateServiceStartUpdate *VirtualMediaActionsVirtualMediaEjectMedia `json:"#UpdateService.StartUpdate,omitempty"`
}

// NewUpdateServiceActions instantiates a new UpdateServiceActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServiceActions() *UpdateServiceActions {
	this := UpdateServiceActions{}
	return &this
}

// NewUpdateServiceActionsWithDefaults instantiates a new UpdateServiceActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServiceActionsWithDefaults() *UpdateServiceActions {
	this := UpdateServiceActions{}
	return &this
}

// GetUpdateServiceSimpleUpdate returns the UpdateServiceSimpleUpdate field value if set, zero value otherwise.
func (o *UpdateServiceActions) GetUpdateServiceSimpleUpdate() VirtualMediaActionsVirtualMediaEjectMedia {
	if o == nil || o.UpdateServiceSimpleUpdate == nil {
		var ret VirtualMediaActionsVirtualMediaEjectMedia
		return ret
	}
	return *o.UpdateServiceSimpleUpdate
}

// GetUpdateServiceSimpleUpdateOk returns a tuple with the UpdateServiceSimpleUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServiceActions) GetUpdateServiceSimpleUpdateOk() (*VirtualMediaActionsVirtualMediaEjectMedia, bool) {
	if o == nil || o.UpdateServiceSimpleUpdate == nil {
		return nil, false
	}
	return o.UpdateServiceSimpleUpdate, true
}

// HasUpdateServiceSimpleUpdate returns a boolean if a field has been set.
func (o *UpdateServiceActions) HasUpdateServiceSimpleUpdate() bool {
	if o != nil && o.UpdateServiceSimpleUpdate != nil {
		return true
	}

	return false
}

// SetUpdateServiceSimpleUpdate gets a reference to the given VirtualMediaActionsVirtualMediaEjectMedia and assigns it to the UpdateServiceSimpleUpdate field.
func (o *UpdateServiceActions) SetUpdateServiceSimpleUpdate(v VirtualMediaActionsVirtualMediaEjectMedia) {
	o.UpdateServiceSimpleUpdate = &v
}

// GetUpdateServiceStartUpdate returns the UpdateServiceStartUpdate field value if set, zero value otherwise.
func (o *UpdateServiceActions) GetUpdateServiceStartUpdate() VirtualMediaActionsVirtualMediaEjectMedia {
	if o == nil || o.UpdateServiceStartUpdate == nil {
		var ret VirtualMediaActionsVirtualMediaEjectMedia
		return ret
	}
	return *o.UpdateServiceStartUpdate
}

// GetUpdateServiceStartUpdateOk returns a tuple with the UpdateServiceStartUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServiceActions) GetUpdateServiceStartUpdateOk() (*VirtualMediaActionsVirtualMediaEjectMedia, bool) {
	if o == nil || o.UpdateServiceStartUpdate == nil {
		return nil, false
	}
	return o.UpdateServiceStartUpdate, true
}

// HasUpdateServiceStartUpdate returns a boolean if a field has been set.
func (o *UpdateServiceActions) HasUpdateServiceStartUpdate() bool {
	if o != nil && o.UpdateServiceStartUpdate != nil {
		return true
	}

	return false
}

// SetUpdateServiceStartUpdate gets a reference to the given VirtualMediaActionsVirtualMediaEjectMedia and assigns it to the UpdateServiceStartUpdate field.
func (o *UpdateServiceActions) SetUpdateServiceStartUpdate(v VirtualMediaActionsVirtualMediaEjectMedia) {
	o.UpdateServiceStartUpdate = &v
}

func (o UpdateServiceActions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdateServiceSimpleUpdate != nil {
		toSerialize["#UpdateService.SimpleUpdate"] = o.UpdateServiceSimpleUpdate
	}
	if o.UpdateServiceStartUpdate != nil {
		toSerialize["#UpdateService.StartUpdate"] = o.UpdateServiceStartUpdate
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateServiceActions struct {
	value *UpdateServiceActions
	isSet bool
}

func (v NullableUpdateServiceActions) Get() *UpdateServiceActions {
	return v.value
}

func (v *NullableUpdateServiceActions) Set(val *UpdateServiceActions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServiceActions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServiceActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServiceActions(val *UpdateServiceActions) *NullableUpdateServiceActions {
	return &NullableUpdateServiceActions{value: val, isSet: true}
}

func (v NullableUpdateServiceActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServiceActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


