/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ResetType the model 'ResetType'
type ResetType string

// List of ResetType
const (
	RESETTYPE_ON ResetType = "On"
	RESETTYPE_FORCE_OFF ResetType = "ForceOff"
	RESETTYPE_GRACEFUL_SHUTDOWN ResetType = "GracefulShutdown"
	RESETTYPE_GRACEFUL_RESTART ResetType = "GracefulRestart"
	RESETTYPE_FORCE_RESTART ResetType = "ForceRestart"
	RESETTYPE_NMI ResetType = "Nmi"
	RESETTYPE_FORCE_ON ResetType = "ForceOn"
	RESETTYPE_PUSH_POWER_BUTTON ResetType = "PushPowerButton"
	RESETTYPE_POWER_CYCLE ResetType = "PowerCycle"
)

// All allowed values of ResetType enum
var AllowedResetTypeEnumValues = []ResetType{
	"On",
	"ForceOff",
	"GracefulShutdown",
	"GracefulRestart",
	"ForceRestart",
	"Nmi",
	"ForceOn",
	"PushPowerButton",
	"PowerCycle",
}

func (v *ResetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResetType(value)
	for _, existing := range AllowedResetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResetType", value)
}

// NewResetTypeFromValue returns a pointer to a valid ResetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResetTypeFromValue(v string) (*ResetType, error) {
	ev := ResetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResetType: valid values are %v", v, AllowedResetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResetType) IsValid() bool {
	for _, existing := range AllowedResetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResetType value
func (v ResetType) Ptr() *ResetType {
	return &v
}

type NullableResetType struct {
	value *ResetType
	isSet bool
}

func (v NullableResetType) Get() *ResetType {
	return v.value
}

func (v *NullableResetType) Set(val *ResetType) {
	v.value = val
	v.isSet = true
}

func (v NullableResetType) IsSet() bool {
	return v.isSet
}

func (v *NullableResetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetType(val *ResetType) *NullableResetType {
	return &NullableResetType{value: val, isSet: true}
}

func (v NullableResetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

