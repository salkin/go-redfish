/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TransferProtocolType the model 'TransferProtocolType'
type TransferProtocolType string

// List of TransferProtocolType
const (
	TRANSFERPROTOCOLTYPE_CIFS TransferProtocolType = "CIFS"
	TRANSFERPROTOCOLTYPE_FTP TransferProtocolType = "FTP"
	TRANSFERPROTOCOLTYPE_SFTP TransferProtocolType = "SFTP"
	TRANSFERPROTOCOLTYPE_HTTP TransferProtocolType = "HTTP"
	TRANSFERPROTOCOLTYPE_HTTPS TransferProtocolType = "HTTPS"
	TRANSFERPROTOCOLTYPE_NFS TransferProtocolType = "NFS"
	TRANSFERPROTOCOLTYPE_SCP TransferProtocolType = "SCP"
	TRANSFERPROTOCOLTYPE_TFTP TransferProtocolType = "TFTP"
)

// All allowed values of TransferProtocolType enum
var AllowedTransferProtocolTypeEnumValues = []TransferProtocolType{
	"CIFS",
	"FTP",
	"SFTP",
	"HTTP",
	"HTTPS",
	"NFS",
	"SCP",
	"TFTP",
}

func (v *TransferProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferProtocolType(value)
	for _, existing := range AllowedTransferProtocolTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferProtocolType", value)
}

// NewTransferProtocolTypeFromValue returns a pointer to a valid TransferProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferProtocolTypeFromValue(v string) (*TransferProtocolType, error) {
	ev := TransferProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferProtocolType: valid values are %v", v, AllowedTransferProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferProtocolType) IsValid() bool {
	for _, existing := range AllowedTransferProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferProtocolType value
func (v TransferProtocolType) Ptr() *TransferProtocolType {
	return &v
}

type NullableTransferProtocolType struct {
	value *TransferProtocolType
	isSet bool
}

func (v NullableTransferProtocolType) Get() *TransferProtocolType {
	return v.value
}

func (v *NullableTransferProtocolType) Set(val *TransferProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferProtocolType(val *TransferProtocolType) *NullableTransferProtocolType {
	return &NullableTransferProtocolType{value: val, isSet: true}
}

func (v NullableTransferProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

