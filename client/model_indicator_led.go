/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// IndicatorLED the model 'IndicatorLED'
type IndicatorLED string

// List of IndicatorLED
const (
	INDICATORLED_UNKNOWN IndicatorLED = "Unknown"
	INDICATORLED_LIT IndicatorLED = "Lit"
	INDICATORLED_BLINKING IndicatorLED = "Blinking"
	INDICATORLED_OFF IndicatorLED = "Off"
)

// All allowed values of IndicatorLED enum
var AllowedIndicatorLEDEnumValues = []IndicatorLED{
	"Unknown",
	"Lit",
	"Blinking",
	"Off",
}

func (v *IndicatorLED) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndicatorLED(value)
	for _, existing := range AllowedIndicatorLEDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndicatorLED", value)
}

// NewIndicatorLEDFromValue returns a pointer to a valid IndicatorLED
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndicatorLEDFromValue(v string) (*IndicatorLED, error) {
	ev := IndicatorLED(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndicatorLED: valid values are %v", v, AllowedIndicatorLEDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndicatorLED) IsValid() bool {
	for _, existing := range AllowedIndicatorLEDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndicatorLED value
func (v IndicatorLED) Ptr() *IndicatorLED {
	return &v
}

type NullableIndicatorLED struct {
	value *IndicatorLED
	isSet bool
}

func (v NullableIndicatorLED) Get() *IndicatorLED {
	return v.value
}

func (v *NullableIndicatorLED) Set(val *IndicatorLED) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorLED) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorLED) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorLED(val *IndicatorLED) *NullableIndicatorLED {
	return &NullableIndicatorLED{value: val, isSet: true}
}

func (v NullableIndicatorLED) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorLED) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

