/*
Redfish OAPI specification

Partial Redfish OAPI specification for a limited client

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ManagerType the model 'ManagerType'
type ManagerType string

// List of ManagerType
const (
	MANAGERTYPE_MANAGEMENT_CONTROLLER ManagerType = "ManagementController"
	MANAGERTYPE_ENCLOSURE_MANAGER ManagerType = "EnclosureManager"
	MANAGERTYPE_BMC ManagerType = "BMC"
	MANAGERTYPE_RACK_MANAGER ManagerType = "RackManager"
	MANAGERTYPE_AUXILIARY_CONTROLLER ManagerType = "AuxiliaryController"
	MANAGERTYPE_SERVICE ManagerType = "Service"
)

// All allowed values of ManagerType enum
var AllowedManagerTypeEnumValues = []ManagerType{
	"ManagementController",
	"EnclosureManager",
	"BMC",
	"RackManager",
	"AuxiliaryController",
	"Service",
}

func (v *ManagerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagerType(value)
	for _, existing := range AllowedManagerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagerType", value)
}

// NewManagerTypeFromValue returns a pointer to a valid ManagerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagerTypeFromValue(v string) (*ManagerType, error) {
	ev := ManagerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagerType: valid values are %v", v, AllowedManagerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagerType) IsValid() bool {
	for _, existing := range AllowedManagerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagerType value
func (v ManagerType) Ptr() *ManagerType {
	return &v
}

type NullableManagerType struct {
	value *ManagerType
	isSet bool
}

func (v NullableManagerType) Get() *ManagerType {
	return v.value
}

func (v *NullableManagerType) Set(val *ManagerType) {
	v.value = val
	v.isSet = true
}

func (v NullableManagerType) IsSet() bool {
	return v.isSet
}

func (v *NullableManagerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagerType(val *ManagerType) *NullableManagerType {
	return &NullableManagerType{value: val, isSet: true}
}

func (v NullableManagerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

